{"version":3,"file":"okta-login.js","sources":["webpack://gateway/./scripts/okta/lib/helper.ts","webpack://gateway/./scripts/okta/okta-login.ts"],"sourcesContent":["/* eslint-disable functional/no-let */\n/**\n * This file contains helper functions that are used in the okta-login.ts file.\n * Used to facilitate functionality to redirect users from the login page to our custom login/welcome page on Gateway.\n *\n * As with the okta-login.ts file, when modifying these files, be sure to code defensively, as we want to handle any errors or unexpected flows that may occur.\n */\n\n/**\n * @interface SignInWidgetConfig\n * @description The configuration object for the Okta Sign-In Widget.\n *\n * A subset of the configuration options are available for use in the Okta Sign-In page.\n *\n * The `relayState` encodes the oauth flow as a url, is used to redirect users to complete the oauth flow.\n *\n * You can view more options by console logging the `window.OktaUtil.getSignInWidgetConfig()` object if needed on the Okta hosted sign in page.\n */\ninterface SignInWidgetConfig {\n\trelayState?: string;\n}\n\n/**\n * @interface RequestContext\n * @description The context object for the Okta Sign-In Widget.\n *\n * A subset of the request context options are available for use in the Okta Sign-In page.\n *\n * Used to perform per app customizations.\n * https://developer.okta.com/docs/guides/custom-widget/main/#per-application-customization\n *\n * Specifically used to get the `clientId` which is the Oauth application client id, and the `label` which is the application name.\n *\n * You can view more options by console logging the `window.OktaUtil.getRequestContext()` object if needed on the Okta hosted sign in page.\n */\ninterface RequestContext {\n\ttarget?: {\n\t\tclientId?: string;\n\t\tlabel?: string;\n\t};\n\tapp?: {\n\t\tvalue?: {\n\t\t\tid?: string;\n\t\t\tlabel?: string;\n\t\t};\n\t};\n\tauthentication?: {\n\t\trequest?: {\n\t\t\tmax_age?: number;\n\t\t};\n\t};\n}\n\n/**\n * @interface OktaUtil\n * @description The OktaUtil object for the Okta Sign-In Widget.\n *\n * A subset of the OktaUtil options are available for use in the Okta Sign-In page.\n *\n * Specially used to type the `getSignInWidgetConfig` and `getRequestContext` functions.\n *\n * You can view more options by console logging the `window.OktaUtil` object if needed on the Okta hosted sign in page.\n */\nexport interface OktaUtil {\n\tgetSignInWidgetConfig: () => SignInWidgetConfig;\n\tgetRequestContext: () => RequestContext;\n\tcompleteLogin: () => void;\n}\n\nexport type OktaSignIn = {\n\tnew (config: SignInWidgetConfig): OktaSignIn;\n\trenderEl(\n\t\toptions: {\n\t\t\tel: string;\n\t\t},\n\t\tcallback: OktaUtil['completeLogin'],\n\t\terror: (err: Error) => void,\n\t): void;\n};\n\n/**\n * @name getRelayState\n * @description Get the relayState from the Okta Sign-In Widget configuration.\n *\n * @param signInWidgetConfig\n * @returns string | undefined\n */\nexport const getRelayState = (\n\tsignInWidgetConfig: SignInWidgetConfig,\n): string | undefined => {\n\treturn signInWidgetConfig.relayState;\n};\n\n/**\n * @name getClientId\n * @description Get the clientId from the Okta Sign-In Widget request context.\n *\n * @param requestContext\n * @returns string | undefined\n */\nexport const getClientId = (\n\trequestContext: RequestContext,\n): string | undefined => {\n\t// requestContext.target.clientId is for Okta Identity Classic\n\t// requestContext.app.value.id is for Okta Identity Engine\n\treturn requestContext.target?.clientId || requestContext.app?.value?.id;\n};\n\n/**\n * @name getThirdPartyClientId\n * @description Get the third party clientId from the Okta Sign-In Widget request context. This is the legacy `clientId` parameter used in Gateway and Identity\n *\n * @param requestContext\n * @returns string | undefined\n */\nexport const getThirdPartyClientId = (\n\trequestContext: RequestContext,\n): string | undefined => {\n\t// requestContext?.target?.label is for Okta Identity Classic\n\t// requestContext?.app?.value?.label is for Okta Identity Engine\n\tconst label =\n\t\trequestContext.target?.label || requestContext.app?.value?.label;\n\tswitch (label) {\n\t\tcase 'jobs_site':\n\t\t\treturn 'jobs';\n\t}\n};\n\n/**\n * @name getThirdPartyReturnUrl\n * @description Get the third party returnUrl from the Okta Sign-In Widget request context. This is the legacy `returnUrl` parameter used in Gateway and Identity\n *\n * @param requestContext\n * @returns string | undefined\n */\nexport const getThirdPartyReturnUrl = (\n\tlocationOrigin: string,\n\trequestContext: RequestContext,\n): string | undefined => {\n\t// requestContext?.target?.label is for Okta Identity Classic\n\t// requestContext?.app?.value?.label is for Okta Identity Engine\n\tconst label =\n\t\trequestContext.target?.label || requestContext.app?.value?.label;\n\tswitch (label) {\n\t\tcase 'jobs_site':\n\t\t\treturn encodeURIComponent(locationOrigin.replace('profile', 'jobs'));\n\t}\n};\n\n/**\n * @name getMaxAge\n * @description Get the max_age from the Okta Sign-In Widget request context.\n *\n * @param requestContext\n * @returns number | undefined\n */\nexport const getMaxAge = (\n\trequestContext?: RequestContext,\n): number | undefined => {\n\treturn requestContext?.authentication?.request?.max_age;\n};\n\n/**\n * @name removePrefixFromToken\n * @description Remove the prefix from the token.\n *\n * If the token is prefixed with an appPrefix, remove it, otherwise redirect loops may occur.\n *\n * @param token\n * @returns string | undefined\n */\nexport const removePrefixFromToken = (\n\ttoken?: string | null,\n): string | undefined => {\n\tif (!token) {\n\t\treturn undefined;\n\t}\n\n\tconst prefix = ['al_', 'il_', 'af_', 'if_'].find((prefix) =>\n\t\ttoken.startsWith(prefix),\n\t);\n\n\tif (!prefix) {\n\t\treturn token;\n\t}\n\n\treturn token.replace(prefix, '');\n};\n\n/**\n * @name getRedirectUrl\n * @description Get the url to redirect users to when the land on the Okta hosted sign in page.\n *\n * Determines whether to send the user to /signin or /welcome/:token on gateway from the Okta hosted sign in page.\n * This allows us to show our custom login/welcome page which we have full control over.\n *\n * We also pass on parameters to Gateway to help with the oauth flow, specifically the `appClientId` and `fromURI`. These parameters allow us to redirect users back to the correct oauth flow from Gateway.\n *\n * @param locationSearch `window.location.search`\n * @param locationOrigin `window.location.origin`\n * @param oktaUtil `window.OktaUtil`\n * @returns string\n */\nexport const getRedirectUrl = (\n\tsearchParams: URLSearchParams,\n\tlocationOrigin: string,\n\tlocationPathname: string,\n\toktaUtil?: OktaUtil,\n): string => {\n\t// set up params class to hold the parameters we'll be passing to our own login page\n\tconst params = new URLSearchParams();\n\n\t// Variable holders for the Okta params we want to pass to our own login page\n\t// This is the URI to redirect to after the user has logged in and has a session set to complete the Authorization Code Flow from the SDK.\n\tlet fromURI: string | undefined;\n\n\t// This is the client ID of the application that is calling the SDK and in turn performing the Authorization Code Flow. This parameter can be used to customise the experience our pages. We attempt to get it from the OktaUtil object, with the existing search parameters as a fallback option\n\tlet clientId: string | undefined;\n\n\t// third party `clientId` query param in Identity, used for `jobs` (Guardian Jobs)\n\t// where we need to add this to the query params we send to gateway\n\tlet thirdPartyClientId: string | undefined;\n\n\t// third party `returnUrl` query param in Identity, used for `jobs` (Guardian Jobs)\n\t// where we need to add this to the query params we send to gateway\n\tlet thirdPartyReturnUrl: string | undefined;\n\n\t// This is the max permitted time since a user last authenticated. If the user last authenticated\n\t// more than this number of seconds ago, they will be prompted to re-authenticate. We attempt to get it\n\t// from the OktaUtil object, with the existing search parameters as a fallback option.\n\tlet maxAge: number | undefined;\n\n\t// check the Okta hosted login page query params for an activation token for welcome page\n\tconst activationToken = removePrefixFromToken(\n\t\tsearchParams.get('activation_token'),\n\t);\n\n\t// check for reset password token\n\tconst resetPasswordToken = removePrefixFromToken(\n\t\tsearchParams.get('reset_password_token'),\n\t);\n\n\t// check for set password token\n\tconst setPasswordToken = removePrefixFromToken(\n\t\tsearchParams.get('set_password_token'),\n\t);\n\n\t// check for referral tracking parameters\n\t// refViewId is the page view id of the referring page whether on app or web\n\tconst refViewId = searchParams.get('refViewId');\n\n\t// ref is the referring page url whether on app or web\n\tconst ref = searchParams.get('ref');\n\n\t// check for page parameter, used to show a particular page on gateway\n\tconst page = searchParams.get('page');\n\n\t// attempt to get the parameters we need from the Okta hosted login page OktaUtil object\n\tif (oktaUtil) {\n\t\t// try getting fromURI from OktaUtil signInWidgetConfig (property is called called relayState)\n\t\tconst signInWidgetConfig = oktaUtil.getSignInWidgetConfig();\n\t\tfromURI = getRelayState(signInWidgetConfig);\n\n\t\t// try getting clientId from OktaUtil requestContext\n\t\tconst requestContext = oktaUtil.getRequestContext();\n\t\tclientId = getClientId(requestContext);\n\n\t\t// determine if this is a third party client e.g. jobs and set the thirdPartyClientId and thirdPartyReturnUrl\n\t\tthirdPartyClientId = getThirdPartyClientId(requestContext);\n\t\tthirdPartyReturnUrl = getThirdPartyReturnUrl(\n\t\t\tlocationOrigin,\n\t\t\trequestContext,\n\t\t);\n\n\t\t// try getting maxAge from OktaUtil requestContext\n\t\tmaxAge = getMaxAge(requestContext);\n\t}\n\n\t// if we're unable to get clientId from OktaUtil, try to get it from the search params where it will exist\n\tif (!clientId) {\n\t\tclientId = searchParams.get('client_id') || undefined;\n\t}\n\n\t// Try and get maxAge from the search params where it may exist\n\tif (!maxAge && searchParams.has('max_age')) {\n\t\t// We know max_age exists here so we can use the non-null assertion operator (!)\n\t\tmaxAge = parseInt(searchParams.get('max_age')!, 10);\n\t}\n\n\t// if fromURI doesn't exist, which is the case when prompt=\"login\" is set and the user is already logged in\n\t// we pass the current url as the fromURI so that the user completes the OAuth flow after login\n\t// as all the parameters we need are in the url\n\t// however this works only in the case when the pathname starts with /oauth2/\n\tif (!fromURI && locationPathname.startsWith('/oauth2/')) {\n\t\t// delete the prompt parameter so that the user doesn't get stuck in a login loop\n\t\tsearchParams.delete('prompt');\n\t\t// delete any custom parameters oauth doesn't use\n\t\tsearchParams.delete('activation_token');\n\t\tsearchParams.delete('reset_password_token');\n\t\tsearchParams.delete('set_password_token');\n\t\tsearchParams.delete('page');\n\t\tsearchParams.delete('refViewId');\n\t\tsearchParams.delete('ref');\n\t\t// set the fromURI parameter\n\t\tparams.set('fromURI', locationPathname + '?' + searchParams.toString());\n\t}\n\n\t// add the parameters to the params class\n\tif (fromURI) {\n\t\tparams.set('fromURI', fromURI);\n\t}\n\tif (clientId) {\n\t\tparams.set('appClientId', clientId);\n\t}\n\tif (thirdPartyClientId) {\n\t\tparams.set('clientId', thirdPartyClientId);\n\t}\n\tif (thirdPartyReturnUrl) {\n\t\tparams.set('returnUrl', thirdPartyReturnUrl);\n\t}\n\t// Set maxAge if it exists and isn't -1 (which Okta sets it to by default)\n\tif (maxAge !== undefined && maxAge >= 0) {\n\t\tparams.set('maxAge', maxAge.toString());\n\t}\n\t// set tracking parameters\n\tif (refViewId) {\n\t\tparams.set('refViewId', refViewId);\n\t\t// for tracking both ref and refViewId are required, but ref might not be available on app so we use a fallback of the current url\n\t\tif (ref) {\n\t\t\tparams.set('ref', ref);\n\t\t} else {\n\t\t\tparams.set('ref', `${locationOrigin}${locationPathname}`);\n\t\t}\n\t}\n\n\t// if we have an activation token, we know we need to go to the create password/welcome page\n\tif (activationToken) {\n\t\treturn `/welcome/${activationToken}?${params.toString()}`;\n\t}\n\n\t// if we have a reset password token, we know we need to go to the reset password page\n\tif (resetPasswordToken) {\n\t\treturn `/reset-password/${resetPasswordToken}?${params.toString()}`;\n\t}\n\n\t// if we have a set password token, we know we need to go to the set password page\n\tif (setPasswordToken) {\n\t\treturn `/set-password/${setPasswordToken}?${params.toString()}`;\n\t}\n\n\t// if we have a page parameter, we need to go to that page on gateway\n\tif (page) {\n\t\t// only allow certain pages\n\t\tswitch (page) {\n\t\t\t// show a specific page on gateway\n\t\t\tcase 'register':\n\t\t\t\treturn `/${page}?${params.toString()}`;\n\t\t\t// instantly start google or apple authentication through gateway\n\t\t\tcase 'google':\n\t\t\tcase 'apple':\n\t\t\t\treturn `/signin/${page}?${params.toString()}`;\n\t\t\tdefault:\n\t\t\t\t// if the page parameter is not one of the allowed pages, then break\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t// if we don't have any tokens, we need to go to the sign in page\n\treturn `/signin?${params.toString()}`;\n};\n","// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path=\"./window.d.ts\" />\n\nimport { getRedirectUrl } from './lib/helper';\n\n// These files is the custom TypeScript for the Okta Login page. This includes this file, the helper file, and the window.d.ts file.\n// We use these files to redirect users from the login page to our custom login/welcome page on Gateway.\n// This is so we can use the Okta SDKs, but still use our own custom login pages.\n\n// We use jsdelivr to load this script, the automatic minification reduces the size.\n// e.g. <script src=\"https://cdn.jsdelivr.net/gh/guardian/gateway@main/scripts/okta/okta-login.min.js\"></script>\n\n// If testing out changes for a particular branch you can change the branch it's looking for in the custom HTML itself.\n// e.g. for a branch called `feature-branch-xyz`\n// <script src=\"https://cdn.jsdelivr.net/gh/guardian/gateway@feature-branch-xyz/scripts/okta/okta-login.min.js\"></script>\n// or commit\n// <script src=\"https://cdn.jsdelivr.net/gh/guardian/gateway@df4557838d25ab7991130acc4cbe92e6ab063e6d/scripts/okta/okta-login.min.js\"></script>\n\n// If you make changes to these files, be sure to run `pnpm run gen:okta-login` to compile the TypeScript and generate the Javascript file, `okta-login.js`.\n// Then be sure to commit the updated Javascript file in order to use it with jsdelivr.\n\n// By writing these files in TypeScript, we can use modern syntax and features, and have the code compiled to ES5 JavaScript.\n// It also allows us to use Jest to test this code, which will run as part of the CI pipeline, or manually using `make test` or `make test:unit`.\n\n// When modifying these files, be sure to code defensively, as we want to handle any errors or unexpected flows that may occur.\n\n// The Okta hosted sign in page doesn't have just one url which it executes on.\n// We've noticed the following two urls (paths):\n// - /login/login.htm\n// - /oauth2/<authorization server id>/v1/authorize\n// each will have a different query string and different config objects which are handled as appropriate in helper.ts.\n\nconst locationSearch = window.location.search;\nconst searchParams = new URLSearchParams(locationSearch);\n\n// Okta Identity Engine now uses JS redirects instead of HTTP redirects.\n// This has the consequence that Social Sign In requires the SDK and widget to be loaded on the page in order to authenticate.\n// However we only want to do this in the case of Social Sign In, as we want to use our own custom login page for other flows.\n// So we check for the `idp` query param, which is only present in the case of Social Sign In or the callback path for Social Sign In.\n// If present, we load the SDK and widget to handle social sign in, otherwise we redirect to our custom login page.\nif (\n\tsearchParams.has('idp') ||\n\twindow.location.pathname === '/oauth2/v1/authorize/callback'\n) {\n\tconst loginContainerId = 'okta-login-container';\n\tconst config = window.OktaUtil.getSignInWidgetConfig();\n\tconst oktaSignIn = new window.OktaSignIn(config);\n\tconst loginContainer = document.getElementById('okta-login-container');\n\toktaSignIn.renderEl(\n\t\t{ el: `#${loginContainerId}` },\n\t\twindow.OktaUtil.completeLogin,\n\t\t(error) => {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.log(error.message, error);\n\t\t\tif (loginContainer) {\n\t\t\t\t// eslint-disable-next-line functional/immutable-data\n\t\t\t\tloginContainer.style.visibility = 'visible';\n\t\t\t}\n\t\t},\n\t);\n} else {\n\tconst redirectUrl = getRedirectUrl(\n\t\tsearchParams,\n\t\twindow.location.origin,\n\t\twindow.location.pathname,\n\t\twindow.OktaUtil,\n\t);\n\n\twindow.location.replace(redirectUrl);\n}\n"],"names":["getClientId","requestContext","target","clientId","app","value","id","getThirdPartyClientId","label","getThirdPartyReturnUrl","locationOrigin","encodeURIComponent","replace","getMaxAge","authentication","request","max_age","removePrefixFromToken","token","prefix","find","startsWith","getRedirectUrl","searchParams","locationPathname","oktaUtil","fromURI","thirdPartyClientId","thirdPartyReturnUrl","maxAge","params","URLSearchParams","activationToken","get","resetPasswordToken","setPasswordToken","refViewId","ref","page","signInWidgetConfig","getSignInWidgetConfig","relayState","getRequestContext","undefined","has","parseInt","delete","set","toString","window","location","search","pathname","config","OktaUtil","oktaSignIn","OktaSignIn","loginContainer","document","getElementById","renderEl","el","completeLogin","error","console","log","message","style","visibility","redirectUrl","origin"],"mappings":"oFAoGO,IAAMA,EAAc,SAC1BC,CAAc,E,IAIPA,EAAmCA,EAAAA,EAA1C,MAAOA,AAAAA,CAAAA,AAAqB,OAArBA,CAAAA,EAAAA,EAAeC,MAAM,AAAD,GAApBD,AAAAA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAuBE,QAAQ,AAAD,GAAC,CAAsB,OAAlBF,CAAAA,EAAAA,EAAeG,GAAG,AAAD,GAAjBH,AAAAA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,AAAyB,OAAzBA,CAAAA,EAAAA,EAAoBI,KAAK,AAAD,GAAxBJ,AAAAA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA2BK,EAAE,AAAD,CACvE,EASaC,EAAwB,SACpCN,CAAc,EAId,IACCA,EAAgCA,EAAAA,EACjC,GACM,cAFLA,CAAAA,AAAAA,CAAAA,AAAqB,OAArBA,CAAAA,EAAAA,EAAeC,MAAM,AAAD,GAApBD,AAAAA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAuBO,KAAK,AAAD,GAAC,CAAsB,OAAlBP,CAAAA,EAAAA,EAAeG,GAAG,AAAD,GAAjBH,AAAAA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,AAAyB,OAAzBA,CAAAA,EAAAA,EAAoBI,KAAK,AAAD,GAAxBJ,AAAAA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA2BO,KAAK,AAAD,CAAC,EAG/D,MAAO,MAEV,EASaC,EAAyB,SACrCC,CAAc,CACdT,CAAc,EAId,IACCA,EAAgCA,EAAAA,EACjC,GACM,cAFLA,CAAAA,AAAAA,CAAAA,AAAqB,OAArBA,CAAAA,EAAAA,EAAeC,MAAM,AAAD,GAApBD,AAAAA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAuBO,KAAK,AAAD,GAAC,CAAsB,OAAlBP,CAAAA,EAAAA,EAAeG,GAAG,AAAD,GAAjBH,AAAAA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,AAAyB,OAAzBA,CAAAA,EAAAA,EAAoBI,KAAK,AAAD,GAAxBJ,AAAAA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA2BO,KAAK,AAAD,CAAC,EAG/D,OAAOG,mBAAmBD,EAAeE,OAAO,CAAC,UAAW,QAE/D,EASaC,EAAY,SACxBZ,CAAc,E,IAEPA,EAAAA,EAAP,OAAOA,MAAAA,EAAAA,KAAAA,EAAAA,AAA8B,OAA9BA,CAAAA,EAAAA,EAAgBa,cAAc,AAAD,GAA7Bb,AAAAA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,AAAuC,OAAvCA,CAAAA,EAAAA,EAAgCc,OAAO,AAAD,GAAtCd,AAAAA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAyCe,OAAO,AACxD,EAWaC,EAAwB,SACpCC,CAAK,EAEL,IAAI,CAACA,GAIL,IAAMC,EAAS,CAAC,MAAO,MAAO,MAAO,MAAM,CAACC,IAAI,CAAC,SAACD,CAAM,E,OACvDD,EAAMG,UAAU,CAACF,E,UAGlB,AAAKA,EAIED,EAAMN,OAAO,CAACO,EAAQ,IAHrBD,EAIT,EAgBaI,EAAiB,SAC7BC,CAAY,CACZb,CAAc,CACdc,CAAgB,CAChBC,CAAQ,EAGR,IAIIC,EAGAvB,EAIAwB,EAIAC,EAKAC,EApBEC,EAAS,IAAIC,gBAuBbC,EAAkBf,EACvBM,EAAaU,GAAG,CAAC,qBAIZC,EAAqBjB,EAC1BM,EAAaU,GAAG,CAAC,yBAIZE,EAAmBlB,EACxBM,EAAaU,GAAG,CAAC,uBAKZG,EAAYb,EAAaU,GAAG,CAAC,aAG7BI,EAAMd,EAAaU,GAAG,CAAC,OAGvBK,EAAOf,EAAaU,GAAG,CAAC,QAG9B,GAAIR,EAAU,CAGbC,EA3KMa,AA0KqBd,EAASe,qBAAqB,GA1KhCC,UAAU,CA8KnC,IAAMxC,EAAiBwB,EAASiB,iBAAiB,GACjDvC,EAAWH,EAAYC,GAGvB0B,EAAqBpB,EAAsBN,GAC3C2B,EAAsBnB,EACrBC,EACAT,GAID4B,EAAShB,EAAUZ,EACpB,CA4DA,GAzDI,CAACE,GACJA,CAAAA,EAAWoB,EAAaU,GAAG,CAAC,cAAgBU,KAAAA,CAAQ,EAIjD,CAACd,GAAUN,EAAaqB,GAAG,CAAC,YAE/Bf,CAAAA,EAASgB,SAAStB,EAAaU,GAAG,CAAC,WAAa,GAAE,EAO/C,CAACP,GAAWF,EAAiBH,UAAU,CAAC,cAE3CE,EAAauB,MAAM,CAAC,UAEpBvB,EAAauB,MAAM,CAAC,oBACpBvB,EAAauB,MAAM,CAAC,wBACpBvB,EAAauB,MAAM,CAAC,sBACpBvB,EAAauB,MAAM,CAAC,QACpBvB,EAAauB,MAAM,CAAC,aACpBvB,EAAauB,MAAM,CAAC,OAEpBhB,EAAOiB,GAAG,CAAC,UAAWvB,EAAmB,IAAMD,EAAayB,QAAQ,KAIjEtB,GACHI,EAAOiB,GAAG,CAAC,UAAWrB,GAEnBvB,GACH2B,EAAOiB,GAAG,CAAC,cAAe5C,GAEvBwB,GACHG,EAAOiB,GAAG,CAAC,WAAYpB,GAEpBC,GACHE,EAAOiB,GAAG,CAAC,YAAanB,GAGVe,KAAAA,IAAXd,GAAwBA,GAAU,GACrCC,EAAOiB,GAAG,CAAC,SAAUlB,EAAOmB,QAAQ,IAGjCZ,IACHN,EAAOiB,GAAG,CAAC,YAAaX,GAEpBC,EACHP,EAAOiB,GAAG,CAAC,MAAOV,GAElBP,EAAOiB,GAAG,CAAC,MAAQ,GAAmBvB,MAAAA,CAAjBd,GAAkC,OAAjBc,KAKpCQ,EACH,MAAQ,YAA8BF,MAAAA,CAAnBE,EAAgB,KAAqB,OAAlBF,EAAOkB,QAAQ,IAItD,GAAId,EACH,MAAQ,mBAAwCJ,MAAAA,CAAtBI,EAAmB,KAAqB,OAAlBJ,EAAOkB,QAAQ,IAIhE,GAAIb,EACH,MAAQ,iBAAoCL,MAAAA,CAApBK,EAAiB,KAAqB,OAAlBL,EAAOkB,QAAQ,IAI5D,GAAIV,EAEH,OAAQA,GAEP,IAAK,WACJ,MAAQ,IAAWR,MAAAA,CAARQ,EAAK,KAAqB,OAAlBR,EAAOkB,QAAQ,GAEnC,KAAK,SACL,IAAK,QACJ,MAAQ,WAAkBlB,MAAAA,CAARQ,EAAK,KAAqB,OAAlBR,EAAOkB,QAAQ,GAI3C,CAID,MAAQ,WAA4B,OAAlBlB,EAAOkB,QAAQ,GAClC,C,oUChVMzB,EAAe,IAAIQ,gBADFkB,OAAOC,QAAQ,CAACC,MAAM,EAQ7C,GACC5B,EAAaqB,GAAG,CAAC,QACjBK,AAA6B,kCAA7BA,OAAOC,QAAQ,CAACE,QAAQ,CACvB,CAED,IAAMC,EAASJ,OAAOK,QAAQ,CAACd,qBAAqB,GAC9Ce,EAAa,IAAIN,OAAOO,UAAU,CAACH,GACnCI,EAAiBC,SAASC,cAAc,CAAC,wBAC/CJ,EAAWK,QAAQ,CAClB,CAAEC,GAAK,IAAoB,OALH,uBAKK,EAC7BZ,OAAOK,QAAQ,CAACQ,aAAa,CAC7B,SAACC,CAAK,EAELC,QAAQC,GAAG,CAACF,EAAMG,OAAO,CAAEH,GACvBN,GAEHA,CAAAA,EAAeU,KAAK,CAACC,UAAU,CAAG,SAAQ,CAE5C,EAEF,KAAO,CACN,IAAMC,EAAc/C,AAAAA,CAAAA,EAAAA,EAAAA,EAAAA,AAAAA,EACnBC,EACA0B,OAAOC,QAAQ,CAACoB,MAAM,CACtBrB,OAAOC,QAAQ,CAACE,QAAQ,CACxBH,OAAOK,QAAQ,EAGhBL,OAAOC,QAAQ,CAACtC,OAAO,CAACyD,EACzB,C"}