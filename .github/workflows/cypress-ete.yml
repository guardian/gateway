name: Cypress E2E tests
on:
  workflow_call:

jobs:
  cypress-nginx:
    name: Cypress End to End tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        group: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
    timeout-minutes: 15
    services:
      redis:
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps Redis port 6379 on service container to the host
          - 6379:6379
    permissions:
      # required by aws-actions/configure-aws-credentials
      id-token: write
      contents: read
    steps:
      - name: Check out repository code
        uses: actions/checkout@v5
      - name: Setup OS, Nginx, and Certs
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libnss3-tools
          sudo service nginx restart
          wget -q https://github.com/FiloSottile/mkcert/releases/download/v1.4.3/mkcert-v1.4.3-linux-amd64
          wget -q https://github.com/guardian/dev-nginx/releases/latest/download/dev-nginx.tar.gz
          sudo cp mkcert-v1.4.3-linux-amd64 /usr/local/bin/mkcert
          sudo chmod +x /usr/local/bin/mkcert
          sudo mkdir -p /usr/local/bin/dev-nginx
          sudo tar -xzf dev-nginx.tar.gz -C /usr/local
          sudo chmod +x /usr/local/bin/dev-nginx
          sudo dev-nginx setup-cert "profile.thegulocal.com"
          sudo cp ./scripts/nginx.conf /etc/nginx/nginx.conf
          sudo dev-nginx restart-nginx
      - name: Configure AWS credentials for SES
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ secrets.AWS_SES_SEND_EMAIL_ROLE_ARN }}
          aws-region: eu-west-1
      - name: Download build
        uses: actions/download-artifact@v5
        with:
          name: build
      - name: Unzip build
        run: unzip -q build.zip
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v5
        with:
          node-version-file: '.nvmrc'
      - name: Get pnpm cache directory path
        id: pnpm-cache-dir
        run: echo "PNPM_STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      - name: Get cypress cache directory path
        id: cypress-cache-dir
        run: echo "CYPRESS_BIN_PATH=$(pnpm dlx cypress cache path)" >> $GITHUB_OUTPUT
      - name: Cache pnpm modules and cypress binary
        uses: actions/cache@v4
        id: pnpm-cache
        with:
          path: |
            ${{ steps.pnpm-cache-dir.outputs.PNPM_STORE_PATH }}
            ${{ steps.cypress-cache-dir.outputs.CYPRESS_BIN_PATH }}
          key: ${{ runner.os }}-pnpm-cypress-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-cypress-
      - name: Cypress run
        uses: cypress-io/github-action@v6
        env:
          PORT: 8861
          ENVIRONMENT: production
          STAGE: DEV
          BASE_URI: profile.thegulocal.com
          CYPRESS_BASE_URI: profile.thegulocal.com
          IDAPI_CLIENT_ACCESS_TOKEN: ${{ secrets.IDAPI_CLIENT_ACCESS_TOKEN }}
          CYPRESS_IDAPI_CLIENT_ACCESS_TOKEN: ${{ secrets.IDAPI_CLIENT_ACCESS_TOKEN }}
          IDAPI_BASE_URL: https://idapi.code.dev-theguardian.com
          CYPRESS_IDAPI_BASE_URL: https://idapi.code.dev-theguardian.com
          DEFAULT_RETURN_URI: https://m.code.dev-theguardian.com
          CYPRESS_DEFAULT_RETURN_URI: https://m.code.dev-theguardian.com
          SIGN_IN_PAGE_URL: https://profile.thegulocal.com/signin
          OAUTH_BASE_URL: https://oauth.code.dev-theguardian.com
          MEMBERS_DATA_API_URL: https://members-data-api.code.dev-theguardian.com
          USER_BENEFITS_API_URL: https://user-benefits.code.dev-guardianapis.com
          CYPRESS_SIGN_IN_PAGE_URL: https://profile.thegulocal.com/signin
          IS_HTTPS: true
          APP_SECRET: ${{ secrets.APP_SECRET }}
          CYPRESS_MAILOSAUR_API_KEY: ${{ secrets.CYPRESS_MAILOSAUR_API_KEY }}
          CYPRESS_MAILOSAUR_SERVER_ID: ${{ secrets.CYPRESS_MAILOSAUR_SERVER_ID }}
          CYPRESS_OKTA_ANDROID_CLIENT_ID: ${{ secrets.CYPRESS_OKTA_ANDROID_CLIENT_ID }}
          # These are public test keys provided by Google for testing.
          # https://developers.google.com/recaptcha/docs/faq#id-like-to-run-automated-tests-with-recaptcha.-what-should-i-do
          GOOGLE_RECAPTCHA_SITE_KEY: 6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI
          GOOGLE_RECAPTCHA_SECRET_KEY: 6LeIxAcTAAAAAGG-vFI1TnRWxMZNFuojJ4WifJWe
          ENCRYPTION_SECRET_KEY: ${{ secrets.ENCRYPTION_SECRET_KEY }}
          GU_OKTA_ENV_COOKIE: 'CODE'
          OKTA_ORG_URL: https://profile.thegulocal.com
          CYPRESS_OKTA_ORG_URL: https://profile.thegulocal.com
          OKTA_API_TOKEN: ${{ secrets.OKTA_API_TOKEN }}
          CYPRESS_OKTA_API_TOKEN: ${{ secrets.OKTA_API_TOKEN }}
          OKTA_CUSTOM_OAUTH_SERVER: ${{ secrets.OKTA_CUSTOM_OAUTH_SERVER }}
          OKTA_CLIENT_ID: ${{ secrets.OKTA_CLIENT_ID }}
          OKTA_CLIENT_SECRET: ${{ secrets.OKTA_CLIENT_SECRET }}
          OKTA_IDP_APPLE: ${{ secrets.OKTA_IDP_APPLE }}
          OKTA_IDP_GOOGLE: ${{ secrets.OKTA_IDP_GOOGLE }}
          OKTA_GUARDIAN_USERS_ALL_GROUP_ID: ${{ secrets.OKTA_GUARDIAN_USERS_ALL_GROUP_ID }}
          REDIS_HOST: localhost
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          REDIS_SSL_ON: false
          RATE_LIMITER_CONFIG: '{"enabled":true,"defaultBuckets":{"globalBucket":{"capacity":500,"addTokenMs":50},"ipBucket":{"capacity":100,"addTokenMs":50},"emailBucket":{"capacity":100,"addTokenMs":50},"oktaIdentifierBucket":{"capacity":4,"addTokenMs":5000},"accessTokenBucket":{"capacity":4,"addTokenMs":5000}}}'
          DELETE_ACCOUNT_STEP_FUNCTION_URL: ${{ secrets.DELETE_ACCOUNT_STEP_FUNCTION_URL }}
          DELETE_ACCOUNT_STEP_FUNCTION_API_KEY: ${{ secrets.DELETE_ACCOUNT_STEP_FUNCTION_API_KEY }}
          CYPRESS_BRAZE_HMAC_KEY: ${{ secrets.CYPRESS_BRAZE_HMAC_KEY }}
          # Required for the Cypress tests to run as we're unable to verify the created certs
          NODE_TLS_REJECT_UNAUTHORIZED: 0
          # Used to tell Gateway server we're running in Cypress
          RUNNING_IN_CYPRESS: true
        with:
          start: pnpm start
          wait-on: 'https://profile.thegulocal.com/healthcheck'
          wait-on-timeout: 60
          browser: chrome
          spec: cypress/integration/ete/**/*.cy.ts
          config: '{"chromeWebSecurity": false,"baseUrl":"https://profile.thegulocal.com","numTestsKeptInMemory":"1","e2e":{"specPattern": ["cypress/integration/ete/**/*.${{ matrix.group }}.cy.ts"]}}'
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots
