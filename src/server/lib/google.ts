import OktaJwtVerifier from '@okta/jwt-verifier';
import { ApiError } from '../models/Error';
import { getConfiguration } from './getConfiguration';

const googleJwtVerifier = new OktaJwtVerifier({
	issuer: 'https://accounts.google.com',
	clientId: getConfiguration().googleOneTapClientId,
	jwksUri: 'https://www.googleapis.com/oauth2/v3/certs',
});

const isAuthoritative = ({
	email,
	emailVerified,
	hd,
}: {
	email: string;
	emailVerified?: unknown;
	hd?: unknown;
}) => {
	// As per Googles documentation, Google is authoritative if:
	// 1. The email is a string and ends with '@gmail.com'
	// 2. The email is verified and the hosted domain (hd) is present.
	return (
		(typeof email === 'string' && email.endsWith('@gmail.com')) ||
		(emailVerified && hd)
	);
};

/**
 * Verify the provided Google ID Token generated by Google One Tap.
 *
 * See: https://developers.google.com/identity/gsi/web/guides/verify-google-id-token
 *
 * @param token to be verified
 * @returns email if the token is valid and authoritative
 */
export const verifyGoogleOneTapToken = async (token: string) => {
	const validatedToken = await googleJwtVerifier.verifyIdToken(
		token,
		getConfiguration().googleOneTapClientId,
	);

	if (
		!['accounts.google.com', 'https://accounts.google.com'].includes(
			validatedToken.claims.iss,
		)
	) {
		throw new ApiError({
			message: `Google One Tap token has invalid issuer: ${validatedToken.claims.iss}`,
			status: 403,
		});
	}

	const { email, hd, email_verified: emailVerified } = validatedToken.claims;

	if (typeof email !== 'string') {
		throw new ApiError({
			message: `Google One Tap token has missing or incorrect email field`,
			status: 403,
		});
	}

	if (!isAuthoritative({ email, emailVerified, hd })) {
		throw new ApiError({
			message: `Google one tap token is not authoritative`,
			status: 403,
		});
	}

	return email;
};
