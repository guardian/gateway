// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The IdentityGateway stack matches the snapshot 1`] = `
{
  "Metadata": {
    "gu:cdk:constructs": [
      "GuDistributionBucketParameter",
      "GuParameter",
      "GuParameter",
      "GuParameter",
      "GuParameter",
      "GuParameter",
      "GuParameter",
      "GuParameter",
      "GuParameter",
      "GuParameter",
      "GuVpcParameter",
      "GuSubnetListParameter",
      "GuSubnetListParameter",
      "GuEc2App",
      "GuInstanceRole",
      "GuSsmSshPolicy",
      "GuDescribeEC2Policy",
      "GuLoggingStreamNameParameter",
      "GuLogShippingPolicy",
      "GuGetDistributablePolicy",
      "GuParameterStoreReadPolicy",
      "GuAmiParameter",
      "GuHttpsEgressSecurityGroup",
      "GuWazuhAccess",
      "GuAutoScalingGroup",
      "GuApplicationLoadBalancer",
      "GuAccessLoggingBucketParameter",
      "GuApplicationTargetGroup",
      "GuHttpsApplicationListener",
      "GuRole",
    ],
    "gu:cdk:version": "TEST",
  },
  "Outputs": {
    "LoadBalancerIdentitygatewayDnsName": {
      "Description": "DNS entry for LoadBalancerIdentitygateway",
      "Value": {
        "Fn::GetAtt": [
          "LoadBalancer",
          "DNSName",
        ],
      },
    },
  },
  "Parameters": {
    "AMIIdentitygateway": {
      "Description": "Amazon Machine Image ID for the app identity-gateway. Use this in conjunction with AMIgo to keep AMIs up to date.",
      "Type": "AWS::EC2::Image::Id",
    },
    "AccessLoggingBucket": {
      "Default": "/account/services/access-logging/bucket",
      "Description": "S3 bucket to store your access logs",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "AlarmEmailAddress": {
      "Description": "Email address to send CloudWatch alerts",
      "Type": "String",
    },
    "DistributionBucketName": {
      "Default": "/account/services/identity.artifact.bucket",
      "Description": "SSM parameter containing the S3 bucket name holding distribution artifacts",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "IdapiBaseUrl": {
      "Default": "/identity/identity-gateway/TEST/idapi-base-url",
      "Description": "The base url for idapi",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "IdentityConfigBucket": {
      "Description": "S3 Bucket to read identity config from",
      "Type": "String",
    },
    "LoggingStreamName": {
      "Default": "/account/services/logging.stream.name",
      "Description": "SSM parameter containing the Name (not ARN) on the kinesis stream",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "MembersDataApiUrl": {
      "Default": "/identity/identity-gateway/TEST/members-data-api-url",
      "Description": "The url for members-data-api",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "OauthBaseUrl": {
      "Default": "/identity/identity-gateway/TEST/oauth-base-url",
      "Description": "The base url for social sign-in with google or apple",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "OktaOrgUrl": {
      "Default": "/identity/identity-gateway/TEST/okta-org-url",
      "Description": "The org url for interacting with okta APIs",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "RedisHost": {
      "Default": "/identity/identity-gateway/TEST/redis-host",
      "Description": "The Redis server URL, used for rate limiting.",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "SentryDsn": {
      "Default": "/identity/identity-gateway/TEST/sentryDsn",
      "Description": "Public data source name for us to send Sentry logs to",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "SignInPageUrl": {
      "Default": "/identity/identity-gateway/TEST/sign-in-url",
      "Description": "Sign in page URL used as a fallback if auth redirect retrieval fails.",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "VpcId": {
      "Default": "/account/vpc/primary/id",
      "Description": "Virtual Private Cloud to run EC2 instances within. Should NOT be the account default VPC.",
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::VPC::Id>",
    },
    "identitygatewayPrivateSubnets": {
      "Default": "/account/vpc/primary/subnets/private",
      "Description": "A list of private subnets",
      "Type": "AWS::SSM::Parameter::Value<List<AWS::EC2::Subnet::Id>>",
    },
    "identitygatewayPublicSubnets": {
      "Default": "/account/vpc/primary/subnets/public",
      "Description": "A list of public subnets",
      "Type": "AWS::SSM::Parameter::Value<List<AWS::EC2::Subnet::Id>>",
    },
  },
  "Resources": {
    "Alarm5XXSustained8C983C32": {
      "Properties": {
        "AlarmActions": [
          {
            "Ref": "TopicSendEmail",
          },
        ],
        "AlarmDescription": "Sustained server errors detected",
        "AlarmName": "URGENT 9-5 - identity-gateway-TEST sustained 5xx errors",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods": 5,
        "InsufficientDataActions": [
          {
            "Ref": "TopicSendEmail",
          },
        ],
        "Metrics": [
          {
            "Expression": "backend5XXCount + elb5XXCount",
            "Id": "expr_1",
          },
          {
            "Id": "backend5XXCount",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "LoadBalancer",
                    "Value": {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Fn::Select": [
                              1,
                              {
                                "Fn::Split": [
                                  "/",
                                  {
                                    "Ref": "ListenerIdentitygatewayC2F66018",
                                  },
                                ],
                              },
                            ],
                          },
                          "/",
                          {
                            "Fn::Select": [
                              2,
                              {
                                "Fn::Split": [
                                  "/",
                                  {
                                    "Ref": "ListenerIdentitygatewayC2F66018",
                                  },
                                ],
                              },
                            ],
                          },
                          "/",
                          {
                            "Fn::Select": [
                              3,
                              {
                                "Fn::Split": [
                                  "/",
                                  {
                                    "Ref": "ListenerIdentitygatewayC2F66018",
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      ],
                    },
                  },
                  {
                    "Name": "TargetGroup",
                    "Value": {
                      "Fn::GetAtt": [
                        "TargetGroupIdentitygateway709F53C5",
                        "TargetGroupFullName",
                      ],
                    },
                  },
                ],
                "MetricName": "HTTPCode_Target_5XX_Count",
                "Namespace": "AWS/ApplicationELB",
              },
              "Period": 60,
              "Stat": "Sum",
              "Unit": "Count",
            },
            "ReturnData": false,
          },
          {
            "Id": "elb5XXCount",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "LoadBalancer",
                    "Value": {
                      "Fn::GetAtt": [
                        "LoadBalancer",
                        "LoadBalancerFullName",
                      ],
                    },
                  },
                ],
                "MetricName": "HTTPCode_ELB_5XX_Count",
                "Namespace": "AWS/ApplicationELB",
              },
              "Period": 60,
              "Stat": "Sum",
              "Unit": "Count",
            },
            "ReturnData": false,
          },
        ],
        "OKActions": [
          {
            "Ref": "TopicSendEmail",
          },
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/gateway",
          },
          {
            "Key": "Stack",
            "Value": "identity",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "Threshold": 15,
        "TreatMissingData": "notBreaching",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "AlarmDeletionInactivityFCF6B89B": {
      "Properties": {
        "AlarmActions": [
          {
            "Ref": "TopicSendEmail",
          },
        ],
        "AlarmDescription": "No one has successfully deleted their account in the last 6 hours.",
        "AlarmName": "URGENT 9-5 - identity-gateway-TEST  has had no success self service user deletion in the last 6 hours",
        "ComparisonOperator": "LessThanThreshold",
        "Dimensions": [
          {
            "Name": "ApiMode",
            "Value": "identity-gateway",
          },
          {
            "Name": "Stage",
            "Value": "TEST",
          },
        ],
        "EvaluationPeriods": 1,
        "InsufficientDataActions": [
          {
            "Ref": "TopicSendEmail",
          },
        ],
        "MetricName": "OAuthDeleteCallback::Success",
        "Namespace": "Gateway",
        "Period": 21600,
        "Statistic": "Sum",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/gateway",
          },
          {
            "Key": "Stack",
            "Value": "identity",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "Threshold": 1,
        "Unit": "Count",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "AlarmHighLatency8D0021F0": {
      "Properties": {
        "AlarmActions": [
          {
            "Ref": "TopicSendEmail",
          },
        ],
        "AlarmDescription": "Latency is greater than 0.5 seconds over 60 seconds for last 5 periods",
        "AlarmName": "MODERATE - identity-gateway-TEST high load balancer latency",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "Dimensions": [
          {
            "Name": "LoadBalancer",
            "Value": {
              "Fn::GetAtt": [
                "LoadBalancer",
                "LoadBalancerFullName",
              ],
            },
          },
        ],
        "EvaluationPeriods": 5,
        "InsufficientDataActions": [
          {
            "Ref": "TopicSendEmail",
          },
        ],
        "MetricName": "TargetResponseTime",
        "Namespace": "AWS/ApplicationELB",
        "Period": 60,
        "Statistic": "Average",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/gateway",
          },
          {
            "Key": "Stack",
            "Value": "identity",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "Threshold": 0.5,
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "AlarmHighLatencyScaling99FA4079": {
      "Properties": {
        "AlarmActions": {
          "Ref": "ScaleUpPolicy",
        },
        "AlarmDescription": "Scale-Up if latency is greater than 0.5 seconds over last 60 seconds",
        "AlarmName": "MODERATE - identity-gateway-TEST high load balancer latency scaling",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "Dimensions": [
          {
            "Name": "LoadBalancer",
            "Value": {
              "Fn::GetAtt": [
                "LoadBalancer",
                "LoadBalancerFullName",
              ],
            },
          },
        ],
        "EvaluationPeriods": 1,
        "MetricName": "TargetResponseTime",
        "Namespace": "AWS/ApplicationELB",
        "OKAction": {
          "Ref": "ScaleDownPolicy",
        },
        "Period": 60,
        "Statistic": "Average",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/gateway",
          },
          {
            "Key": "Stack",
            "Value": "identity",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "Threshold": 0.5,
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "AlarmNoHealthyHosts53E5701D": {
      "Properties": {
        "AlarmActions": [
          {
            "Ref": "TopicSendEmail",
          },
        ],
        "AlarmDescription": "There are insufficient healthy hosts",
        "AlarmName": "MODERATE - identity-gateway-TEST insufficient healthy hosts",
        "ComparisonOperator": "LessThanThreshold",
        "Dimensions": [
          {
            "Name": "LoadBalancer",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Fn::Select": [
                      1,
                      {
                        "Fn::Split": [
                          "/",
                          {
                            "Ref": "ListenerIdentitygatewayC2F66018",
                          },
                        ],
                      },
                    ],
                  },
                  "/",
                  {
                    "Fn::Select": [
                      2,
                      {
                        "Fn::Split": [
                          "/",
                          {
                            "Ref": "ListenerIdentitygatewayC2F66018",
                          },
                        ],
                      },
                    ],
                  },
                  "/",
                  {
                    "Fn::Select": [
                      3,
                      {
                        "Fn::Split": [
                          "/",
                          {
                            "Ref": "ListenerIdentitygatewayC2F66018",
                          },
                        ],
                      },
                    ],
                  },
                ],
              ],
            },
          },
          {
            "Name": "TargetGroup",
            "Value": {
              "Fn::GetAtt": [
                "TargetGroupIdentitygateway709F53C5",
                "TargetGroupFullName",
              ],
            },
          },
        ],
        "EvaluationPeriods": 1,
        "InsufficientDataActions": [
          {
            "Ref": "TopicSendEmail",
          },
        ],
        "MetricName": "HealthyHostCount",
        "Namespace": "AWS/ApplicationELB",
        "OKActions": [
          {
            "Ref": "TopicSendEmail",
          },
        ],
        "Period": 60,
        "Statistic": "Average",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/gateway",
          },
          {
            "Key": "Stack",
            "Value": "identity",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "Threshold": 1,
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "AlarmOAuthApplicationCallbackInactivity3A52F4C7": {
      "Properties": {
        "AlarmActions": [
          {
            "Ref": "TopicSendEmail",
          },
        ],
        "AlarmDescription": "No one has successfully completed OAuth Authorization code flow callbacks for internal Gateway routes in the last 1 hour.",
        "AlarmName": "CRITICAL Respond Immediately - identity-gateway-TEST has had no success OAuth Authorization code flow callbacks for internal Gateway routes in the last 1 hour",
        "ComparisonOperator": "LessThanThreshold",
        "Dimensions": [
          {
            "Name": "ApiMode",
            "Value": "identity-gateway",
          },
          {
            "Name": "Stage",
            "Value": "TEST",
          },
        ],
        "EvaluationPeriods": 1,
        "InsufficientDataActions": [
          {
            "Ref": "TopicSendEmail",
          },
        ],
        "MetricName": "OAuthApplicationCallback::Success",
        "Namespace": "Gateway",
        "Period": 3600,
        "Statistic": "Sum",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/gateway",
          },
          {
            "Key": "Stack",
            "Value": "identity",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "Threshold": 1,
        "Unit": "Count",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "AlarmOAuthAuthenticationCallbackInactivity98B9502B": {
      "Properties": {
        "AlarmActions": [
          {
            "Ref": "TopicSendEmail",
          },
        ],
        "AlarmDescription": "No one has successfully completed OAuth Authorization code flow callbacks for Authentication in the last 20 minutes.",
        "AlarmName": "CRITICAL Respond Immediately - identity-gateway-TEST has had no success OAuth Authorization code flow callbacks for Authentication in the last 20 minutes",
        "ComparisonOperator": "LessThanThreshold",
        "Dimensions": [
          {
            "Name": "ApiMode",
            "Value": "identity-gateway",
          },
          {
            "Name": "Stage",
            "Value": "TEST",
          },
        ],
        "EvaluationPeriods": 1,
        "InsufficientDataActions": [
          {
            "Ref": "TopicSendEmail",
          },
        ],
        "MetricName": "OAuthAuthenticationCallback::Success",
        "Namespace": "Gateway",
        "Period": 1200,
        "Statistic": "Sum",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/gateway",
          },
          {
            "Key": "Stack",
            "Value": "identity",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "Threshold": 1,
        "Unit": "Count",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "AlarmRegisterInactivity9AAE6F59": {
      "Properties": {
        "AlarmActions": [
          {
            "Ref": "TopicSendEmail",
          },
        ],
        "AlarmDescription": "No one has successfully registered in the last hour.",
        "AlarmName": "CRITICAL Respond Immediately - identity-gateway-TEST has had no new registrations in the last hour",
        "ComparisonOperator": "LessThanThreshold",
        "EvaluationPeriods": 1,
        "InsufficientDataActions": [
          {
            "Ref": "TopicSendEmail",
          },
        ],
        "Metrics": [
          {
            "Expression": "oktaRegistrationCount + oktaIdxRegistrationCount",
            "Id": "expr_1",
          },
          {
            "Id": "oktaRegistrationCount",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "ApiMode",
                    "Value": "identity-gateway",
                  },
                  {
                    "Name": "Stage",
                    "Value": "TEST",
                  },
                ],
                "MetricName": "OktaRegistration::Success",
                "Namespace": "Gateway",
              },
              "Period": 3600,
              "Stat": "Sum",
              "Unit": "Count",
            },
            "ReturnData": false,
          },
          {
            "Id": "oktaIdxRegistrationCount",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "ApiMode",
                    "Value": "identity-gateway",
                  },
                  {
                    "Name": "Stage",
                    "Value": "TEST",
                  },
                ],
                "MetricName": "OktaIDXRegister::Success",
                "Namespace": "Gateway",
              },
              "Period": 3600,
              "Stat": "Sum",
              "Unit": "Count",
            },
            "ReturnData": false,
          },
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/gateway",
          },
          {
            "Key": "Stack",
            "Value": "identity",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "Threshold": 1,
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "AlarmSigninInactivityA6965F14": {
      "Properties": {
        "AlarmActions": [
          {
            "Ref": "TopicSendEmail",
          },
        ],
        "AlarmDescription": "Sustained server errors detected",
        "AlarmName": "CRITICAL Respond Immediately - identity-gateway-TEST has had no new sign-ins in the last 20 minutes",
        "ComparisonOperator": "LessThanThreshold",
        "EvaluationPeriods": 1,
        "InsufficientDataActions": [
          {
            "Ref": "TopicSendEmail",
          },
        ],
        "Metrics": [
          {
            "Expression": "oktaSignInCount + oktaIdxSignInCount",
            "Id": "expr_1",
          },
          {
            "Id": "oktaSignInCount",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "ApiMode",
                    "Value": "identity-gateway",
                  },
                  {
                    "Name": "Stage",
                    "Value": "TEST",
                  },
                ],
                "MetricName": "OktaSignIn::Success",
                "Namespace": "Gateway",
              },
              "Period": 1200,
              "Stat": "Sum",
              "Unit": "Count",
            },
            "ReturnData": false,
          },
          {
            "Id": "oktaIdxSignInCount",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "ApiMode",
                    "Value": "identity-gateway",
                  },
                  {
                    "Name": "Stage",
                    "Value": "TEST",
                  },
                ],
                "MetricName": "OktaIdxSignIn::Success",
                "Namespace": "Gateway",
              },
              "Period": 1200,
              "Stat": "Sum",
              "Unit": "Count",
            },
            "ReturnData": false,
          },
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/gateway",
          },
          {
            "Key": "Stack",
            "Value": "identity",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "Threshold": 1,
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "AlarmUnsubscribeAllInactivity91929B50": {
      "Properties": {
        "AlarmActions": [
          {
            "Ref": "TopicSendEmail",
          },
        ],
        "AlarmDescription": "No one has successfully unsubscribed all from email clients in the last hour.",
        "AlarmName": "URGENT 9-5 - identity-gateway-TEST has had successful no unsubscribe all from email clients in the last hour",
        "ComparisonOperator": "LessThanThreshold",
        "Dimensions": [
          {
            "Name": "ApiMode",
            "Value": "identity-gateway",
          },
          {
            "Name": "Stage",
            "Value": "TEST",
          },
        ],
        "EvaluationPeriods": 1,
        "InsufficientDataActions": [
          {
            "Ref": "TopicSendEmail",
          },
        ],
        "MetricName": "UnsubscribeAll::Success",
        "Namespace": "Gateway",
        "Period": 3600,
        "Statistic": "Sum",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/gateway",
          },
          {
            "Key": "Stack",
            "Value": "identity",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "Threshold": 1,
        "Unit": "Count",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "AutoScalingGroupIdentitygatewayASG7D467284": {
      "Properties": {
        "HealthCheckGracePeriod": 120,
        "HealthCheckType": "ELB",
        "LaunchTemplate": {
          "LaunchTemplateId": {
            "Ref": "identityTESTidentitygateway7C7C3C37",
          },
          "Version": {
            "Fn::GetAtt": [
              "identityTESTidentitygateway7C7C3C37",
              "LatestVersionNumber",
            ],
          },
        },
        "MaxSize": "2",
        "MetricsCollection": [
          {
            "Granularity": "1Minute",
          },
        ],
        "MinSize": "1",
        "Tags": [
          {
            "Key": "App",
            "PropagateAtLaunch": true,
            "Value": "identity-gateway",
          },
          {
            "Key": "gu:cdk:version",
            "PropagateAtLaunch": true,
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "PropagateAtLaunch": true,
            "Value": "guardian/gateway",
          },
          {
            "Key": "LogKinesisStreamName",
            "PropagateAtLaunch": true,
            "Value": {
              "Ref": "LoggingStreamName",
            },
          },
          {
            "Key": "Stack",
            "PropagateAtLaunch": true,
            "Value": "identity",
          },
          {
            "Key": "Stage",
            "PropagateAtLaunch": true,
            "Value": "TEST",
          },
          {
            "Key": "SystemdUnit",
            "PropagateAtLaunch": true,
            "Value": "identity-gateway.service",
          },
        ],
        "TargetGroupARNs": [
          {
            "Ref": "TargetGroupIdentitygateway709F53C5",
          },
        ],
        "VPCZoneIdentifier": {
          "Ref": "identitygatewayPrivateSubnets",
        },
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
    },
    "DescribeEC2PolicyFF5F9295": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "autoscaling:DescribeAutoScalingInstances",
                "autoscaling:DescribeAutoScalingGroups",
                "ec2:DescribeTags",
                "ec2:DescribeInstances",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "describe-ec2-policy",
        "Roles": [
          {
            "Ref": "InstanceRoleIdentitygatewayF5932C92",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "GetDistributablePolicyIdentitygatewayD2C0494C": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:GetObject",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "DistributionBucketName",
                    },
                    "/identity/TEST/identity-gateway/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "GetDistributablePolicyIdentitygatewayD2C0494C",
        "Roles": [
          {
            "Ref": "InstanceRoleIdentitygatewayF5932C92",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "GithubActionsSESSendEmailsRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": {
                "StringLike": {
                  "token.actions.githubusercontent.com:sub": "repo:guardian/gateway:*",
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Federated": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":oidc-provider/token.actions.githubusercontent.com",
                    ],
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "ses:SendEmail",
                  "Effect": "Allow",
                  "Resource": "*",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "SendEmailSES",
          },
        ],
        "RoleName": "GithubActionsSESSendEmailsRole",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/gateway",
          },
          {
            "Key": "Stack",
            "Value": "identity",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "GuHttpsEgressSecurityGroupIdentitygatewayA7C3F011": {
      "Properties": {
        "GroupDescription": "Allow all outbound HTTPS traffic",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound HTTPS traffic",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "Tags": [
          {
            "Key": "App",
            "Value": "identity-gateway",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/gateway",
          },
          {
            "Key": "Stack",
            "Value": "identity",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "VpcId": {
          "Ref": "VpcId",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "GuHttpsEgressSecurityGroupIdentitygatewayfromIdentityGatewayLoadBalancerIdentitygatewaySecurityGroupA3602EBF92338F6DA735": {
      "Properties": {
        "Description": "Load balancer to target",
        "FromPort": 9233,
        "GroupId": {
          "Fn::GetAtt": [
            "GuHttpsEgressSecurityGroupIdentitygatewayA7C3F011",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "LoadBalancerIdentitygatewaySecurityGroupC2E97C21",
            "GroupId",
          ],
        },
        "ToPort": 9233,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "GuLogShippingPolicy981BFE5A": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:kinesis:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "GuLogShippingPolicy981BFE5A",
        "Roles": [
          {
            "Ref": "InstanceRoleIdentitygatewayF5932C92",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "InstanceRoleIdentitygatewayDefaultPolicy171217D4": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ses:SendEmail",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "InstanceRoleIdentitygatewayDefaultPolicy171217D4",
        "Roles": [
          {
            "Ref": "InstanceRoleIdentitygatewayF5932C92",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "InstanceRoleIdentitygatewayF5932C92": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Path": "/",
        "Tags": [
          {
            "Key": "App",
            "Value": "identity-gateway",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/gateway",
          },
          {
            "Key": "Stack",
            "Value": "identity",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ListenerIdentitygatewayC2F66018": {
      "Properties": {
        "DefaultActions": [
          {
            "TargetGroupArn": {
              "Ref": "TargetGroupIdentitygateway709F53C5",
            },
            "Type": "forward",
          },
        ],
        "LoadBalancerArn": {
          "Ref": "LoadBalancer",
        },
        "Port": 8080,
        "Protocol": "HTTP",
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "LoadBalancer": {
      "Properties": {
        "LoadBalancerAttributes": [
          {
            "Key": "deletion_protection.enabled",
            "Value": "true",
          },
          {
            "Key": "routing.http.x_amzn_tls_version_and_cipher_suite.enabled",
            "Value": "true",
          },
          {
            "Key": "routing.http.drop_invalid_header_fields.enabled",
            "Value": "true",
          },
          {
            "Key": "access_logs.s3.enabled",
            "Value": "true",
          },
          {
            "Key": "access_logs.s3.bucket",
            "Value": {
              "Ref": "AccessLoggingBucket",
            },
          },
          {
            "Key": "access_logs.s3.prefix",
            "Value": "ELBLogs/TEST/identity-gateway/TEST",
          },
        ],
        "Name": "identity-identity-gateway-TEST",
        "SecurityGroups": [
          {
            "Fn::GetAtt": [
              "LoadBalancerIdentitygatewaySecurityGroupC2E97C21",
              "GroupId",
            ],
          },
        ],
        "Subnets": {
          "Ref": "identitygatewayPublicSubnets",
        },
        "Tags": [
          {
            "Key": "App",
            "Value": "identity-gateway",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/gateway",
          },
          {
            "Key": "Stack",
            "Value": "identity",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
    },
    "LoadBalancerIdentitygatewaySecurityGroupC2E97C21": {
      "Properties": {
        "GroupDescription": "Automatically created Security Group for ELB IdentityGatewayLoadBalancerIdentitygatewayDD0AB5CE",
        "Tags": [
          {
            "Key": "App",
            "Value": "identity-gateway",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/gateway",
          },
          {
            "Key": "Stack",
            "Value": "identity",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "VpcId": {
          "Ref": "VpcId",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "LoadBalancerIdentitygatewaySecurityGrouptoIdentityGatewayGuHttpsEgressSecurityGroupIdentitygatewayF2FC415C9233734A9C39": {
      "Properties": {
        "Description": "Load balancer to target",
        "DestinationSecurityGroupId": {
          "Fn::GetAtt": [
            "GuHttpsEgressSecurityGroupIdentitygatewayA7C3F011",
            "GroupId",
          ],
        },
        "FromPort": 9233,
        "GroupId": {
          "Fn::GetAtt": [
            "LoadBalancerIdentitygatewaySecurityGroupC2E97C21",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "ToPort": 9233,
      },
      "Type": "AWS::EC2::SecurityGroupEgress",
    },
    "LoadBalancerIdentitygatewaySecurityGrouptoIdentityGatewayWazuhSecurityGroup38645DD692330392A21B": {
      "Properties": {
        "Description": "Load balancer to target",
        "DestinationSecurityGroupId": {
          "Fn::GetAtt": [
            "WazuhSecurityGroup",
            "GroupId",
          ],
        },
        "FromPort": 9233,
        "GroupId": {
          "Fn::GetAtt": [
            "LoadBalancerIdentitygatewaySecurityGroupC2E97C21",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "ToPort": 9233,
      },
      "Type": "AWS::EC2::SecurityGroupEgress",
    },
    "ParameterStoreReadIdentitygatewayDA9EF7BF": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ssm:GetParametersByPath",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/TEST/identity/identity-gateway",
                  ],
                ],
              },
            },
            {
              "Action": [
                "ssm:GetParameters",
                "ssm:GetParameter",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/TEST/identity/identity-gateway/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "parameter-store-read-policy",
        "Roles": [
          {
            "Ref": "InstanceRoleIdentitygatewayF5932C92",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ScaleDownPolicy": {
      "Properties": {
        "AutoScalingGroupName": {
          "Ref": "AutoScalingGroupIdentitygatewayASG7D467284",
        },
        "Cooldown": "1800",
        "PolicyType": "SimpleScaling",
        "ScalingAdjustment": -1,
      },
      "Type": "AWS::AutoScaling::ScalingPolicy",
    },
    "ScaleUpPolicy": {
      "Properties": {
        "AutoScalingGroupName": {
          "Ref": "AutoScalingGroupIdentitygatewayASG7D467284",
        },
        "Cooldown": "300",
        "PolicyType": "SimpleScaling",
        "ScalingAdjustment": 1,
      },
      "Type": "AWS::AutoScaling::ScalingPolicy",
    },
    "SendEmailToIdentityDevTokenSubscription19A813FC8": {
      "Properties": {
        "Endpoint": {
          "Ref": "AlarmEmailAddress",
        },
        "Protocol": "email",
        "TopicArn": {
          "Ref": "TopicSendEmail",
        },
      },
      "Type": "AWS::SNS::Subscription",
    },
    "SsmSshPolicy4CFC977E": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ec2messages:AcknowledgeMessage",
                "ec2messages:DeleteMessage",
                "ec2messages:FailMessage",
                "ec2messages:GetEndpoint",
                "ec2messages:GetMessages",
                "ec2messages:SendReply",
                "ssm:UpdateInstanceInformation",
                "ssm:ListInstanceAssociations",
                "ssm:DescribeInstanceProperties",
                "ssm:DescribeDocumentParameters",
                "ssmmessages:CreateControlChannel",
                "ssmmessages:CreateDataChannel",
                "ssmmessages:OpenControlChannel",
                "ssmmessages:OpenDataChannel",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ssm-ssh-policy",
        "Roles": [
          {
            "Ref": "InstanceRoleIdentitygatewayF5932C92",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "TargetGroupIdentitygateway709F53C5": {
      "Properties": {
        "HealthCheckEnabled": true,
        "HealthCheckIntervalSeconds": 10,
        "HealthCheckPath": "/healthcheck",
        "HealthCheckPort": "9233",
        "HealthCheckProtocol": "HTTP",
        "HealthCheckTimeoutSeconds": 5,
        "HealthyThresholdCount": 2,
        "Port": 9233,
        "Protocol": "HTTP",
        "Tags": [
          {
            "Key": "App",
            "Value": "identity-gateway",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/gateway",
          },
          {
            "Key": "Stack",
            "Value": "identity",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "TargetGroupAttributes": [
          {
            "Key": "deregistration_delay.timeout_seconds",
            "Value": "30",
          },
          {
            "Key": "stickiness.enabled",
            "Value": "false",
          },
        ],
        "TargetType": "instance",
        "UnhealthyThresholdCount": 2,
        "VpcId": {
          "Ref": "VpcId",
        },
      },
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
    },
    "TopicSendEmail": {
      "Properties": {
        "DisplayName": "SendEmailToIdentityDev",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/gateway",
          },
          {
            "Key": "Stack",
            "Value": "identity",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::SNS::Topic",
    },
    "WazuhSecurityGroup": {
      "Properties": {
        "GroupDescription": "Allow outbound traffic from wazuh agent to manager",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Wazuh event logging",
            "FromPort": 1514,
            "IpProtocol": "tcp",
            "ToPort": 1514,
          },
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Wazuh agent registration",
            "FromPort": 1515,
            "IpProtocol": "tcp",
            "ToPort": 1515,
          },
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/gateway",
          },
          {
            "Key": "Stack",
            "Value": "identity",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "VpcId": {
          "Ref": "VpcId",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "WazuhSecurityGroupfromIdentityGatewayLoadBalancerIdentitygatewaySecurityGroupA3602EBF92337D4F9DEE": {
      "Properties": {
        "Description": "Load balancer to target",
        "FromPort": 9233,
        "GroupId": {
          "Fn::GetAtt": [
            "WazuhSecurityGroup",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "LoadBalancerIdentitygatewaySecurityGroupC2E97C21",
            "GroupId",
          ],
        },
        "ToPort": 9233,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "identityTESTidentitygateway7C7C3C37": {
      "DependsOn": [
        "InstanceRoleIdentitygatewayDefaultPolicy171217D4",
        "InstanceRoleIdentitygatewayF5932C92",
      ],
      "Properties": {
        "LaunchTemplateData": {
          "IamInstanceProfile": {
            "Arn": {
              "Fn::GetAtt": [
                "identityTESTidentitygatewayProfileAEE12FAF",
                "Arn",
              ],
            },
          },
          "ImageId": {
            "Ref": "AMIIdentitygateway",
          },
          "InstanceType": "t4g.small",
          "MetadataOptions": {
            "HttpTokens": "required",
            "InstanceMetadataTags": "enabled",
          },
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "GuHttpsEgressSecurityGroupIdentitygatewayA7C3F011",
                "GroupId",
              ],
            },
            {
              "Fn::GetAtt": [
                "WazuhSecurityGroup",
                "GroupId",
              ],
            },
          ],
          "TagSpecifications": [
            {
              "ResourceType": "instance",
              "Tags": [
                {
                  "Key": "App",
                  "Value": "identity-gateway",
                },
                {
                  "Key": "gu:cdk:version",
                  "Value": "TEST",
                },
                {
                  "Key": "gu:repo",
                  "Value": "guardian/gateway",
                },
                {
                  "Key": "Name",
                  "Value": "IdentityGateway/identity-TEST-identity-gateway",
                },
                {
                  "Key": "Stack",
                  "Value": "identity",
                },
                {
                  "Key": "Stage",
                  "Value": "TEST",
                },
              ],
            },
            {
              "ResourceType": "volume",
              "Tags": [
                {
                  "Key": "App",
                  "Value": "identity-gateway",
                },
                {
                  "Key": "gu:cdk:version",
                  "Value": "TEST",
                },
                {
                  "Key": "gu:repo",
                  "Value": "guardian/gateway",
                },
                {
                  "Key": "Name",
                  "Value": "IdentityGateway/identity-TEST-identity-gateway",
                },
                {
                  "Key": "Stack",
                  "Value": "identity",
                },
                {
                  "Key": "Stage",
                  "Value": "TEST",
                },
              ],
            },
          ],
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": [
                "",
                [
                  "#!/bin/bash

      mkdir /etc/gu

      # Get Riff Raff deployed artefact S3
      aws s3 cp s3://",
                  {
                    "Ref": "DistributionBucketName",
                  },
                  "/TEST/identity-gateway/identity-gateway.zip /etc/gu
      unzip -o /etc/gu/identity-gateway.zip -d /etc/gu

      # Get Rate Limiter configuration file
      # Try multiple times to the config file. The s3 cp command can fail when called immediately on instance startup.
      while true; do
        if           aws s3 cp s3://",
                  {
                    "Ref": "IdentityConfigBucket",
                  },
                  "/TEST/identity-gateway/.ratelimit.json /etc/gu/.ratelimit.json
          then break
        fi
        sleep 1
      done

      # Setup user
      groupadd identity-gateway
      useradd -r -s /usr/bin/nologin -g identity-gateway identity-gateway
      chown -R identity-gateway:identity-gateway /etc/gu

      # Setup logs
      touch /var/log/identity-gateway.log
      chown identity-gateway:identity-gateway /var/log/identity-gateway.log

      # Try multiple times to get parameter store values. The SSM command can fail when called immediately on instance startup.
      while true; do
        if           IDAPI_CLIENT_ACCESS_TOKEN=$(aws ssm get-parameter --name '/identity/identity-gateway/TEST/idapi-client-access-token' --with-decryption --region eu-west-1 --query="Parameter.Value" --output="text") &&           APP_SECRET=$(aws ssm get-parameter --name '/identity/identity-gateway/TEST/appSecret' --with-decryption --region eu-west-1 --query="Parameter.Value" --output="text") &&           GOOGLE_RECAPTCHA_SITE_KEY=$(aws ssm get-parameter --name '/identity/identity-gateway/TEST/recaptcha-site-key' --with-decryption --region eu-west-1 --query="Parameter.Value" --output="text") &&           GOOGLE_RECAPTCHA_SECRET_KEY=$(aws ssm get-parameter --name '/identity/identity-gateway/TEST/recaptcha-secret-key' --with-decryption --region eu-west-1 --query="Parameter.Value" --output="text") &&           REDIS_PASSWORD=$(aws ssm get-parameter --name '/identity/identity-gateway/TEST/redis-password' --with-decryption --region eu-west-1 --query="Parameter.Value" --output="text") &&           ENCRYPTION_SECRET_KEY=$(aws ssm get-parameter --name '/identity/identity-gateway/TEST/encryption-secret-key' --with-decryption --region eu-west-1 --query="Parameter.Value" --output="text") &&           OKTA_API_TOKEN=$(aws ssm get-parameter --name '/identity/identity-gateway/TEST/okta-api-token' --with-decryption --region eu-west-1 --query="Parameter.Value" --output="text") &&           OKTA_CUSTOM_OAUTH_SERVER=$(aws ssm get-parameter --name '/identity/identity-gateway/TEST/oktaCustomOAuthServer' --with-decryption --region eu-west-1 --query="Parameter.Value" --output="text") &&           OKTA_CLIENT_ID=$(aws ssm get-parameter --name '/identity/identity-gateway/TEST/oktaClientId' --with-decryption --region eu-west-1 --query="Parameter.Value" --output="text") &&           OKTA_CLIENT_SECRET=$(aws ssm get-parameter --name '/identity/identity-gateway/TEST/oktaClientSecret' --with-decryption --region eu-west-1 --query="Parameter.Value" --output="text")
          OKTA_IDP_APPLE=$(aws ssm get-parameter --name '/identity/identity-gateway/TEST/oktaIdpApple' --with-decryption --region eu-west-1 --query="Parameter.Value" --output="text")
          OKTA_IDP_GOOGLE=$(aws ssm get-parameter --name '/identity/identity-gateway/TEST/oktaIdpGoogle' --with-decryption --region eu-west-1 --query="Parameter.Value" --output="text")
          OKTA_GUARDIAN_USERS_ALL_GROUP_ID=$(aws ssm get-parameter --name '/identity/identity-gateway/TEST/oktaGuardianUsersAllGroupId' --with-decryption --region eu-west-1 --query="Parameter.Value" --output="text")
          DELETE_ACCOUNT_STEP_FUNCTION_URL=$(aws ssm get-parameter --name '/identity/identity-gateway/TEST/deleteAccountStepFunctionUrl' --with-decryption --region eu-west-1 --query="Parameter.Value" --output="text")
          DELETE_ACCOUNT_STEP_FUNCTION_API_KEY=$(aws ssm get-parameter --name '/identity/identity-gateway/TEST/deleteAccountStepFunctionApiKey' --with-decryption --region eu-west-1 --query="Parameter.Value" --output="text")
          then break
        fi

        sleep 1
      done

      # systemd setup
      cat > /etc/systemd/system/identity-gateway.service <<EOL
      [Service]
      ExecStart=/bin/sh -ec '/usr/bin/node /etc/gu/server.js 2>&1'
      Restart=always
      StandardOutput=journal
      StandardError=journal
      SyslogIdentifier=identity-gateway
      User=identity-gateway
      Group=identity-gateway
      Environment=NODE_ENV=production
      Environment=PORT=9233
      Environment=IDAPI_CLIENT_ACCESS_TOKEN=$IDAPI_CLIENT_ACCESS_TOKEN
      Environment=IDAPI_BASE_URL=",
                  {
                    "Ref": "IdapiBaseUrl",
                  },
                  "
      Environment=SIGN_IN_PAGE_URL=",
                  {
                    "Ref": "SignInPageUrl",
                  },
                  "
      Environment=OAUTH_BASE_URL=",
                  {
                    "Ref": "OauthBaseUrl",
                  },
                  "
      Environment=BASE_URI=profile.code.dev-theguardian.com
      Environment=DEFAULT_RETURN_URI=https://m.code.dev-theguardian.com
      Environment=STAGE=TEST
      Environment=IS_HTTPS=true
      Environment=APP_SECRET=$APP_SECRET
      Environment=GOOGLE_RECAPTCHA_SITE_KEY=$GOOGLE_RECAPTCHA_SITE_KEY
      Environment=GOOGLE_RECAPTCHA_SECRET_KEY=$GOOGLE_RECAPTCHA_SECRET_KEY
      Environment=ENCRYPTION_SECRET_KEY=$ENCRYPTION_SECRET_KEY
      Environment=OKTA_ORG_URL=",
                  {
                    "Ref": "OktaOrgUrl",
                  },
                  "
      Environment=OKTA_API_TOKEN=$OKTA_API_TOKEN
      Environment=OKTA_CUSTOM_OAUTH_SERVER=$OKTA_CUSTOM_OAUTH_SERVER
      Environment=OKTA_CLIENT_ID=$OKTA_CLIENT_ID
      Environment=OKTA_CLIENT_SECRET=$OKTA_CLIENT_SECRET
      Environment=OKTA_IDP_APPLE=$OKTA_IDP_APPLE
      Environment=OKTA_IDP_GOOGLE=$OKTA_IDP_GOOGLE
      Environment=OKTA_GUARDIAN_USERS_ALL_GROUP_ID=$OKTA_GUARDIAN_USERS_ALL_GROUP_ID            
      Environment=SENTRY_DSN=",
                  {
                    "Ref": "SentryDsn",
                  },
                  "
      Environment=REDIS_PASSWORD=$REDIS_PASSWORD
      Environment=REDIS_HOST=",
                  {
                    "Ref": "RedisHost",
                  },
                  "
      Environment=REDIS_SSL_ON=true
      Environment=MEMBERS_DATA_API_URL=",
                  {
                    "Ref": "MembersDataApiUrl",
                  },
                  "
      Environment=DELETE_ACCOUNT_STEP_FUNCTION_URL=$DELETE_ACCOUNT_STEP_FUNCTION_URL
      Environment=DELETE_ACCOUNT_STEP_FUNCTION_API_KEY=$DELETE_ACCOUNT_STEP_FUNCTION_API_KEY

      [Install]
      WantedBy=multi-user.target
      EOL

      systemctl enable identity-gateway
      systemctl start identity-gateway",
                ],
              ],
            },
          },
        },
        "TagSpecifications": [
          {
            "ResourceType": "launch-template",
            "Tags": [
              {
                "Key": "App",
                "Value": "identity-gateway",
              },
              {
                "Key": "gu:cdk:version",
                "Value": "TEST",
              },
              {
                "Key": "gu:repo",
                "Value": "guardian/gateway",
              },
              {
                "Key": "Name",
                "Value": "IdentityGateway/identity-TEST-identity-gateway",
              },
              {
                "Key": "Stack",
                "Value": "identity",
              },
              {
                "Key": "Stage",
                "Value": "TEST",
              },
            ],
          },
        ],
      },
      "Type": "AWS::EC2::LaunchTemplate",
    },
    "identityTESTidentitygatewayProfileAEE12FAF": {
      "Properties": {
        "Roles": [
          {
            "Ref": "InstanceRoleIdentitygatewayF5932C92",
          },
        ],
      },
      "Type": "AWS::IAM::InstanceProfile",
    },
  },
}
`;
